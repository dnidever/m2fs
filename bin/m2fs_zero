#!/usr/bin/env python

# By Matt Walker, with some revisions by D. Nidever
#

import numpy as np
import astropy
from astropy import units
from astropy.io import fits
import matplotlib
matplotlib.use('TkAgg')
import matplotlib.pyplot as plt
from astropy.nddata import NDData
from astropy.nddata import CCDData
import ccdproc
import astropy.units as u
from astropy.modeling import models
from ccdproc import Combiner
import os
from argparse import ArgumentParser
from m2fs import utils
from m2fs import process as m2fs

def sigma_clip(arr,nlo=3.0,nhi=3.0,iter=False):
    """ Apply sigma clipping on 3D array along axis=0."""

    med = np.median(arr,axis=0)
    med3d = med[None,...]+np.zeros(nim)[:,None,None]  # using broadcasting to repeat "med" along 1st axis
    sig = 1.4826*np.median(np.abs(arr-med3d),axis=0)
    hi = (med+nhi*sig)[None,...]+np.zeros(nim)[:,None,None] 
    lo = (med-nlo*sig)[None,...]+np.zeros(nim)[:,None,None] 
    # Set masked values to NaN, then use np.nanmedian or np.nanmean
    mask = (arr < lo) | (arr > hi)
    arr[mask] = np.nan
    nmask = np.sum(mask)
    print(str(nmask),' pixels masked')

    return arr,mask


if __name__ == "__main__":
    parser = ArgumentParser(description='Make a master M2FS bias image.')
    parser.add_argument('listfile', type=str, nargs=1, help='Input list of bias frames')
    parser.add_argument('-d','--datadir', type=str, nargs=1, default='', help='M2FS raw directory')
    parser.add_argument('--tag', type=str, nargs=1, default = '', help='Short name (e.g., jan20)')
    args = parser.parse_args()

    # Get the input parameters
    datadir = args.datadir
    if isinstance(datadir,list): datadir=datadir[0]
    if datadir=='':
        # use current directory
        datadir = os.path.abspath(os.path.curdir)+'/'
    listfile = args.listfile
    if isinstance(listfile,list): listfile=listfile[0]
    if os.path.dirname(listfile)=='':   # relative path
        listfile = datadir+listfile
    tag = args.tag
    if isinstance(tag,list): tag=tag[0]
    if tag=='':
        tag = os.path.basename(listfile).split('_')[0]

    print('Input list = '+listfile)
    print('Datadir = '+datadir)
    print('Tag = '+tag)

    # Check that input list file exists
    if os.path.exists(listfile) == False:
        raise ValueError(listfile+' NOT FOUND')

    # Load the input list file
    with open(listfile) as f:
        data = f.readlines()[0:]
    utdate = []
    file1 = []
    file2 = []
    for line in data:
        p = line.split()
        utdate.append(str(p[0]))
        file1.append(int(p[1]))
        file2.append(int(p[2]))
    utdate = np.array(utdate)
    file1 = np.array(file1)
    file2 = np.array(file2)

    count = 0

    # Arm loop
    for ccd in (['b','r']):
        print('')
        print('--- CCD/ARM '+ccd+' ---')
        print('')
        # Amp loop
        for chip in (['c1','c2','c3','c4']):
            print('chip = '+chip)
            print('---------')
            obs_readnoise = []
            processed = []
            # Date loop
            for i in range(0,len(utdate)):
                # File loop
                for j in range(file1[i],file2[i]+1):
                    filename = datadir+utdate[i]+'/'+ccd+str(j).zfill(4)+chip+'.fits'
                    if os.path.exists(filename) is False: filename+='.gz'
                    count += 1

                    data = astropy.nddata.CCDData.read(filename,unit=u.adu)      # header is in data.meta
                    print(str(count),filename,data.header['object'],data.header['binning'])
                    print(str(data.shape)+'  '+'{:.1f}'.format(np.mean(data)))
                    if len(processed)==0:
                        shp = data.shape
                    if data.shape != shp:
                        print('Shape '+str(data.shape)+' does NOT match shape of first file '+str(shp)+'. Skipping this file.')
                        continue

                    oscan_subtracted = ccdproc.subtract_overscan(data,overscan=data[:,1024:],overscan_axis=1,
                                                                 model=models.Polynomial1D(3),add_keyword={'oscan_corr':'Done'})
                    trimmed1 = ccdproc.trim_image(oscan_subtracted[:,:1024],add_keyword={'trim1':'Done'})
                    trimmed2 = ccdproc.trim_image(trimmed1[:1028,:1024],add_keyword={'trim2':'Done'})
                    array1d = trimmed2.data.flatten()
                    gain = np.float(trimmed2.header['egain'])
                    keep = np.where(np.abs(array1d)<100.)[0]                    # remove crazy outliers
                    obs_readnoise.append(np.std(array1d[keep]*gain))
                    processed.append(trimmed2)


            # Put in a 3D numpy array
            nim = len(processed)
            pshape = processed[0].data.shape
            arr = np.zeros((nim,pshape[0],pshape[1]),float)
            for i in range(nim):
                arr[i,:,:] = processed[i].data
            print('Sigma clipping')
            arr,mask = sigma_clip(arr)

            print('Taking average')
            avgim = np.nanmedian(arr,axis=0)
            out = astropy.nddata.CCDData(avgim,unit='adu')
            obs_readnoise = np.array(obs_readnoise)
            out.header['obs_rdnoise'] = str(np.median(obs_readnoise))
            outfile = datadir+tag+'_'+ccd+'_'+chip+'_master_bias.fits'
            print('Writing master bias frame to '+outfile)
            out.write(outfile,overwrite=True)

